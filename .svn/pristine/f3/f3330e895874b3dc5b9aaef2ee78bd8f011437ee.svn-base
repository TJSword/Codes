// pages/Chart/Chart.js
import * as echarts from '../../ec-canvas/echarts';
const app = getApp()
Page({

  /**
   * 页面的初始数据
   */
  data: {
    statusBarHeight: app.globalData.statusBarHeight,
    contribution: [],
    ec: {
      lazyLoad: false // 延迟加载
    }, //饼图
    startDate: '2019-01-01',
    endDate: '2020-03-24',
    type: 0,
    isCreate: wx.getStorageSync('iscreate'),
    userId: wx.getStorageSync('uid'),
    showDemandList: true,
    isrp:true
  },
  goBack: function (e) {//点击返回按钮 返回上一层页面
    wx.redirectTo({
      url: '../Index/Index',
    })
  },
  choose(e) {
    console.log(e.target.dataset.type)
    if (e.target.dataset.type == 0 || e.target.dataset.type == 1 || e.target.dataset.type == 2) {
      this.setData({
        type: e.target.dataset.type
      })
      this.getPie(this.data.startDate, this.data.endDate, this.data.type, this.data.userId,this.data.isrp)
    }
    if (e.target.dataset.type == 3) {
      console.log(this.data.userInfo)
      let userInfo = this.data.userInfo
      if(this.data.isrp === true){
        userInfo.forEach(item=>{
          item.value = item.offer
        })
      }else if(this.data.isrp === false){
        userInfo.forEach(item=>{
          item.value = item.commission
        })
      }
      
      this.setData({
        type: e.target.dataset.type,
        pieData: userInfo
      })
      console.log(this.data.pieData)
      setTimeout(() => {
        this.init_pieCharts()
      }, 50)

    }

  },
  chooseType(e){
    console.log(e.target.dataset.isrp)
    if(e.target.dataset.isrp === true){
      this.setData({
        isrp:true
      })
      if(this.data.type == 0 || this.data.type == 1 || this.data.type == 2){
        this.getPie(this.data.startDate, this.data.endDate, this.data.type, this.data.userId,this.data.isrp)
      }else if(this.data.type == 3){
        let userInfo = this.data.userInfo
        userInfo.forEach(item=>{
          item.value = item.offer
        })
        this.setData({
          pieData: userInfo
        })
        console.log(this.data.pieData)
        setTimeout(() => {
          this.init_pieCharts()
        }, 50)
      }
      
    }else if(e.target.dataset.isrp === false){
      this.setData({
        isrp:false
      })
      if(this.data.type == 0 || this.data.type == 1 || this.data.type == 2){
        this.getPie(this.data.startDate, this.data.endDate, this.data.type, this.data.userId,this.data.isrp)
      }else if(this.data.type == 3){
        let userInfo = this.data.userInfo
        userInfo.forEach(item=>{
          item.value = item.commission
        })
        this.setData({
          pieData: userInfo
        })
        console.log(this.data.pieData)
        setTimeout(() => {
          this.init_pieCharts()
        }, 50)
      }
      
    }
  },
  bindStartDateChange(e) {
    console.log(e.detail.value)
    this.setData({
      startDate: e.detail.value
    })
    console.log(this.data.startDate)
    this.getPie(this.data.startDate, this.data.endDate, this.data.type, this.data.userId,this.data.isrp)
    this.getcontributeList()
    this.getShareList()
  },
  bindEndDateChange(e) {
    console.log(e.detail.value)
    this.setData({
      endDate: e.detail.value
    })
    console.log(this.data.startDate)
    this.getPie(this.data.startDate, this.data.endDate, this.data.type, this.data.userId,this.data.isrp)
    this.getcontributeList()
    this.getShareList()
  },
  //初始化图表--饼图
  init_pieCharts: function () {
    console.log(this.piechartsComponnet)
    this.piechartsComponnet.init((canvas, width, height) => {
      // 初始化图表
      const pieChart = echarts.init(canvas, null, {
        width: width,
        height: height
      });
      pieChart.setOption(this.getPieOption());
      // 注意这里一定要返回 chart 实例，否则会影响事件处理等
      return pieChart;
    });
  },

  //饼图
  getPieOption: function () {
    var option = {
      tooltip: {
        show: true,
        formatter: "{b} : {c} ({d}%)"
      },
      color: ["#f4f1de", "#e07a5f", "#3d405b", "#81b29a", "#f2cc8f", "#eae2b7"],
      calculable: true,
      series: [{
        name: '分类',
        type: 'pie',
        center: ['50%', '50%'],
        radius: 80,
        legend: {
          orient: 'vertical',
          x: '70%',
          y: 'center',
          itemWidth: 20,
          itemHeight: 20,
          align: 'left',
          textStyle: {
            fontSize: 14,
            color: '#000'
          },
        },
        itemStyle: {
          normal: {
            label: {
              show: true,
              position: 'top',
              // formatter: function (params) {
              //   return (params.percent - 0).toFixed(0) + '%'
              // }
            },
            labelLine: {
              show: true
            }
          },
          // emphasis: {
          //   label: {
          //     show: true,
          //     formatter: "{b}\n{d}%"
          //   }
          // }
        },
        data: this.data.pieData
      }]
    };
    return option;
  },
  getPie(startDate, endDate, type, userId,isRp) {
    wx.request({
      url: app.globalData.URL + '/statistics/taskStructure',
      method: "GET",
      header: {
        token: wx.getStorageSync("token")
      },
      data: {
        userId: userId ? userId : wx.getStorageSync('uid'),
        startDate: startDate,
        endDate: endDate,
        type: type
      },
      success: res => {
        if(isRp === true){
          res.data.searchResult.forEach(item=>{
            item.value = item.offer
          })
        }else if(isRp === false){
          res.data.searchResult.forEach(item=>{
            item.value = item.commission
          })
        }
        console.log(res.data.searchResult)
        this.setData({
          pieData: res.data.searchResult
        })
        console.log(this.data.pieData)
        setTimeout(() => {
          this.init_pieCharts()
        }, 50)

      }
    })

  },
  today(e) {
    let date = new Date()
    let year = date.getFullYear()
    let month = date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1
    let day = date.getDate() < 10 ? '0' + date.getDate() : date.getDate()
    let today = year + '-' + month + '-' + day
    this.setData({
      endDate: today
    })
    console.log(today)
  },
  bindPeopleChange(e) {
    console.log(e.detail.value)
    this.setData({
      peopleIndex: e.detail.value,
      userId: this.data.peopleDetail[e.detail.value].user_id
    })
    this.getPie(this.data.startDate, this.data.endDate, this.data.type, this.data.userId,this.data.isrp)
    this.getcontributeList()
    this.getShareList()
  },
  getcontributeList() {
    wx.request({
      url: app.globalData.URL + '/statistics/contribute',
      method: 'GET',
      header: {
        token: wx.getStorageSync("token")
      },
      data: {
        userId: this.data.userId ? this.data.userId : wx.getStorageSync('uid'),
        startDate: this.data.startDate,
        endDate: this.data.endDate
      },
      success: res => {
        console.log(res.data.contributeList)
        this.setData({
          contribution: res.data.contributeList
        })
      },
    })
  },
  getUserList() {
    wx.request({
      url: app.globalData.URL + '/user/list',
      method: "GET",
      header: {
        token: wx.getStorageSync("token")
      },

      success: res => {
        console.log(res.data.serchResult)
        let peopleDetail = res.data.serchResult
        let peopleName = [];
        let userInfo = []
        peopleDetail.forEach(item => {
          peopleName.push(item.name)
          userInfo.push({
            name: item.name,
            offer: item.offer,
            commission:item.commission
          })
        })
        console.log(peopleName)
        console.log(userInfo)
        this.setData({
          peopleDetail: peopleDetail,
          peopleName: peopleName,
          userInfo: userInfo
        })
        console.log(this.data.userInfo)
      }
    })
  },
  getShareList() {
    wx.request({
      url: app.globalData.URL + '/statistics/shareCount',
      method: "GET",
      header: {
        token: wx.getStorageSync("token")
      },
      data: {
        userId: this.data.userId ? this.data.userId : wx.getStorageSync('uid'),
        startDate: this.data.startDate,
        endDate: this.data.endDate
      },
      success: res => {
        console.log(res.data.joinList)
        console.log(res.data.shareList)
        this.setData({
          joinList: res.data.joinList,
          shareList: res.data.shareList
        })
      }
    })
    console.log(this.data.isCreate)
  },
  showDemandList(e){
    this.setData({
      showDemandList:true
    })
  },
  showTaskList(e){
    this.setData({
      showDemandList: false
    })
  },
  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    this.today()
    this.getUserList()
    this.getPie(this.data.startDate, this.data.endDate, this.data.type,this.data.isrp)
    this.getcontributeList()
    this.getShareList()
    this.setData({
      isCreate: wx.getStorageSync('iscreate')
    })
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {
    this.piechartsComponnet = this.selectComponent('#mychart-dom-bar'); //饼图
    this.init_pieCharts()
    // console.log(mychart)
    // mychart.on('mousemove',params=>{
    //   console.log(params)
    // })
  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  }
})